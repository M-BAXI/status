name: Maintenance Email Notifications

on:
  issues:
    types: [opened, edited, reopened, closed, labeled]
  workflow_dispatch:

permissions:
  contents: read
  issues: read

jobs:
  send-email:
    # 只在 issues 事件并且标题正确时执行
    if: github.event.issue && startsWith(github.event.issue.title, '[Scheduled Maintenance]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract maintenance info (with extension detection)
        id: maint
        uses: actions/github-script@v7
        with:
          script: |
            const payload = context.payload;
            if (!payload.issue) {
              core.setFailed("当前触发事件没有 issue 对象，只支持 issues 事件触发。");
              return;
            }

            const issue = payload.issue;
            const body = issue.body || "";

            // 解析 KV 注释块
            const parseKV = (text) => {
              const m = (text || "").match(/<!--([\s\S]*?)-->/);
              const kv = { start: "", end: "", expectedDown: "", expectedDegraded: "" };
              if (!m) return kv;
              for (const line of m[1].split("\n")) {
                const mm = line.match(/^\s*([a-zA-Z]+)\s*:\s*(.+?)\s*$/);
                if (!mm) continue;
                const k = mm[1], v = mm[2];
                if (kv.hasOwnProperty(k)) kv[k] = v;
              }
              return kv;
            };

            const newKV   = parseKV(body);
            const oldBody = payload.changes?.body?.from || "";
            const oldKV   = parseKV(oldBody);

            // 可见正文
            let visible = body.replace(/<!--[\s\S]*?-->/g, "").trim();
            const ctxMatch = visible.match(/\*\*Additional context\*\*([\s\S]*)$/i);
            const contextText = (ctxMatch ? ctxMatch[1] : visible).trim();

            const normList = (s) =>
              (s || "").split(/[,\n]/).map(x => x.trim()).filter(Boolean);

            const downList     = normList(newKV.expectedDown);
            const degradedList = normList(newKV.expectedDegraded);

            // 判定模式
            let mode = "start"; // start | extended_changed | extended_label | finished
            let previousEnd = "";
            const action = payload.action;

            if (action === "closed") {
              mode = "finished";
            } else if (action === "edited") {
              if (newKV.end && oldKV.end && newKV.end !== oldKV.end) {
                mode = "extended_changed";
                previousEnd = oldKV.end;
              }
            } else if (action === "labeled") {
              const lbl = (payload.label?.name || "").toLowerCase();
              if (lbl === "extended") mode = "extended_label";
            }

            // 邮件模板文本
            let subjectPrefix = "🔧 服务系统维护通知";
            let introLine     = "服务将于以下时间进行维护：";
            let tailLine      = "如遇不可预计的问题，维护时间将会延长，具体延误时间将另行通知。";

            if (mode === "extended_changed") {
              subjectPrefix = "⚠️ 维护延长通知";
              introLine     = `维护时间已延长：原计划结束 ${previousEnd} → 延长至 ${newKV.end}`;
              tailLine      = "请注意，维护窗口比原计划更长，可能继续影响部分服务。";
            } else if (mode === "extended_label") {
              subjectPrefix = "⚠️ 维护延长通知";
              introLine     = "维护时间已延长，当前延误时长待定：";
              tailLine      = "我们会在确定新的结束时间后第一时间通知。";
            } else if (mode === "finished") {
              subjectPrefix = "✅ 维护完成通知";
              introLine     = "以下维护任务已完成，服务恢复正常：";
              tailLine      = "✅ 所有服务已恢复正常运行，感谢理解与配合！";
            }

            // 输出
            core.setOutput("mode", mode);
            core.setOutput("subject_prefix", subjectPrefix);
            core.setOutput("intro_line", introLine);
            core.setOutput("tail_line", tailLine);

            core.setOutput("issue_title", issue.title);
            core.setOutput("start", newKV.start || "（未指定）");
            core.setOutput("end",   newKV.end   || "（未指定）");
            core.setOutput("prev_end", previousEnd || "（无）");
            core.setOutput("down",     downList.length ? downList.join(", ") : "无");
            core.setOutput("degraded", degradedList.length ? degradedList.join(", ") : "无");
            core.setOutput("context",  contextText || "（无补充说明）");

      - name: Send email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.163.com
          server_port: 465
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          to: "bryanyijies@qq.com"
          from: "Adoremont IT Service <${{ secrets.SMTP_USER }}>"
          subject: "${{ steps.maint.outputs.subject_prefix }}｜${{ steps.maint.outputs.issue_title }}"
          body: |
            各位好，

            ${{ steps.maint.outputs.intro_line }}

            标题：${{ steps.maint.outputs.issue_title }}
            开始：${{ steps.maint.outputs.start }}
            结束：${{ steps.maint.outputs.end }}
            ${{ steps.maint.outputs.mode == 'extended_changed' && format('原计划结束：{0}', steps.maint.outputs.prev_end) || '' }}

            受影响服务：
            - 预计不可用（down）：${{ steps.maint.outputs.down }}
            - 预计降级（degraded）：${{ steps.maint.outputs.degraded }}

            维护说明：
            ${{ steps.maint.outputs.context }}

            ${{ steps.maint.outputs.tail_line }}
